Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
# Sample values for X
X <- runif(50, min = -10, max = 10)
# sample values for coefficient and exponent
C <- runif(1, min = -4, max = 4)
#generate Y using the formula Y = C * X^E
Y <- C * X
# sample values for the sd of the error term
error_sd <- runif(1, min = 0, max = 3)
# Calculate Y using the formula Y = C * X^E
Y = Y + rnorm(length(X), mean = 0, sd = sd(Y) * error_sd)
# 4. Rescale Y_raw to the interval [-10, 10]
Y        <- (Y - min(Y)) / diff(range(Y)) * 20 - 10
ggplot(data = data.frame(X, Y), aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
cor <- cor(X, Y)
runApp('TestCorr')
# assume 'cor' is already defined
# 1) correct guess
guess1 <- cor
# 2) wrong guess #1
repeat {
rd <- runif(1, -0.7, 0.7)
g2 <- cor + rd
# flip back into [-1,1] if out of bounds
if (g2 > 1 || g2 < -1) g2 <- cor - rd
# accept only if at least 0.1 away from guess1
if (abs(g2 - guess1) > 0.1) break
}
guess2 <- g2
# 3) wrong guess #2
repeat {
rd <- runif(1, -0.7, 0.7)
g3 <- cor + rd
if (g3 > 1 || g3 < -1) g3 <- cor - rd
# need to be 0.1 away from both guess1 and guess2
if (abs(g3 - guess1) > 0.1 && abs(g3 - guess2) > 0.1) break
}
guess3 <- g3
# 4) wrong guess #3
repeat {
rd <- runif(1, -0.7, 0.7)
g4 <- cor + rd
if (g4 > 1 || g4 < -1) g4 <- cor - rd
# need to be 0.1 away from guess1, guess2, and guess3
if (abs(g4 - guess1) > 0.1 &&
abs(g4 - guess2) > 0.1 &&
abs(g4 - guess3) > 0.1) break
}
guess4 <- g4
# (optional) collect into a vector
guesses <- c(guess1, guess2, guess3, guess4)
# assume 'cor' is already defined
# 1) correct guess
guess1 <- cor
# 2) wrong guess #1
repeat {
rd <- runif(1, -0.7, 0.7)
g2 <- cor + rd
# flip back into [-1,1] if out of bounds
if (g2 > 1 || g2 < -1) g2 <- cor - rd
# accept only if at least 0.1 away from guess1
if (abs(g2 - guess1) > 0.1) break
}
guess2 <- g2
# 3) wrong guess #2
repeat {
rd <- runif(1, -0.7, 0.7)
g3 <- cor + rd
if (g3 > 1 || g3 < -1) g3 <- cor - rd
# need to be 0.1 away from both guess1 and guess2
if (abs(g3 - guess1) > 0.1 && abs(g3 - guess2) > 0.1) break
}
guess3 <- g3
# 4) wrong guess #3
repeat {
rd <- runif(1, -0.7, 0.7)
g4 <- cor + rd
if (g4 > 1 || g4 < -1) g4 <- cor - rd
# need to be 0.1 away from guess1, guess2, and guess3
if (abs(g4 - guess1) > 0.1 &&
abs(g4 - guess2) > 0.1 &&
abs(g4 - guess3) > 0.1) break
}
guess4 <- g4
# (optional) collect into a vector
guesses <- c(guess1, guess2, guess3, guess4)
# assume 'cor' is already defined
# 1) correct guess
guess1 <- cor
# 2) wrong guess #1
repeat {
rd <- runif(1, -0.7, 0.7)
g2 <- cor + rd
# flip back into [-1,1] if out of bounds
if (g2 > 1 || g2 < -1) g2 <- cor - rd
# accept only if at least 0.1 away from guess1
if (abs(g2 - guess1) > 0.1) break
}
guess2 <- g2
# 3) wrong guess #2
repeat {
rd <- runif(1, -0.7, 0.7)
g3 <- cor + rd
if (g3 > 1 || g3 < -1) g3 <- cor - rd
# need to be 0.1 away from both guess1 and guess2
if (abs(g3 - guess1) > 0.1 && abs(g3 - guess2) > 0.1) break
}
guess3 <- g3
# 4) wrong guess #3
repeat {
rd <- runif(1, -0.7, 0.7)
g4 <- cor + rd
if (g4 > 1 || g4 < -1) g4 <- cor - rd
# need to be 0.1 away from guess1, guess2, and guess3
if (abs(g4 - guess1) > 0.1 &&
abs(g4 - guess2) > 0.1 &&
abs(g4 - guess3) > 0.1) break
}
guess4 <- g4
# (optional) collect into a vector
guesses <- c(guess1, guess2, guess3, guess4)
# Print the guesses
print(guesses)
# assume 'cor' is defined
# 1) correct guess, rounded
guess1 <- round(cor, 2)
# 2) wrong guess #1
repeat {
rd1 <- runif(1, -0.7, 0.7)
g2  <- round(guess1 + rd1, 2)
# clamp into [-1,1]
if (g2 > 1 || g2 < -1) {
g2 <- round(guess1 - rd1, 2)
}
# accept if ≥0.1 away from guess1
if (abs(g2 - guess1) > 0.1) break
}
guess2 <- g2
# 3) wrong guess #2
repeat {
rd2 <- runif(1, -0.7, 0.7)
g3  <- round(guess1 + rd2, 2)
if (g3 > 1 || g3 < -1) {
g3 <- round(guess1 - rd2, 2)
}
# must be ≥0.1 away from both guess1 & guess2
if (abs(g3 - guess1) > 0.1 && abs(g3 - guess2) > 0.1) break
}
guess3 <- g3
# 4) wrong guess #3
repeat {
rd3 <- runif(1, -0.7, 0.7)
g4  <- round(guess1 + rd3, 2)
if (g4 > 1 || g4 < -1) {
g4 <- round(guess1 - rd3, 2)
}
# must be ≥0.1 away from guess1, guess2 & guess3
if (abs(g4 - guess1) > 0.1 &&
abs(g4 - guess2) > 0.1 &&
abs(g4 - guess3) > 0.1) break
}
guess4 <- g4
# collect if you like
guesses <- c(guess1, guess2, guess3, guess4)
print(guesses)
# assume 'cor' is defined
# 1) correct guess, rounded
guess1 <- round(cor, 2)
# 2) wrong guess #1
repeat {
rd1 <- runif(1, -0.7, 0.7)
g2  <- round(guess1 + rd1, 2)
# clamp into [-1,1]
if (g2 > 1 || g2 < -1) {
g2 <- round(guess1 - rd1, 2)
}
# accept if ≥0.1 away from guess1
if (abs(g2 - guess1) > 0.1) break
}
guess2 <- g2
# 3) wrong guess #2
repeat {
rd2 <- runif(1, -0.7, 0.7)
g3  <- round(guess1 + rd2, 2)
if (g3 > 1 || g3 < -1) {
g3 <- round(guess1 - rd2, 2)
}
# must be ≥0.1 away from both guess1 & guess2
if (abs(g3 - guess1) > 0.1 && abs(g3 - guess2) > 0.1) break
}
guess3 <- g3
# 4) wrong guess #3
repeat {
rd3 <- runif(1, -0.7, 0.7)
g4  <- round(guess1 + rd3, 2)
if (g4 > 1 || g4 < -1) {
g4 <- round(guess1 - rd3, 2)
}
# must be ≥0.1 away from guess1, guess2 & guess3
if (abs(g4 - guess1) > 0.1 &&
abs(g4 - guess2) > 0.1 &&
abs(g4 - guess3) > 0.1) break
}
guess4 <- g4
# collect if you like
guesses <- c(guess1, guess2, guess3, guess4)
print(guesses)
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
shiny::runApp('Correlator')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
