Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
#sample 50 X values
X <- runif(50, min = -10, max = 10)
# sample either 1, 2, 3 or 4
mm <- as.numeric(sample(1:5, size = 1))
mm <- 5
if (mm == 1) {
# Generate Y using a linear relationship
C <- runif(1, min = -4, max = 4)
Y_base   <- C * X
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 2) {
# Generate Y using a quadratic relationship
C <- runif(1, min = -4, max = 4)
E <- 2 # Fixed exponent for quadratic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 3) {
# Generate Y using a cubic relationship
C <- runif(1, min = -4, max = 4)
E <- 3 # Fixed exponent for cubic
Y_base   <- C * X^E
err_sd   <- runif(1, min = 0.3, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else if (mm == 4){
# Generate Y using a exponential relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 0.3, max = 0.9) # Random exponent for exponential
Y_base   <- C * exp(E * X)
err_sd   <- runif(1, min = 0, max = 0.7)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
} else {
# Generate Y using a logarithmic relationship
C <- sample(c(-5, -4, 4, 5), size = 1)
E <- runif(1, min = 5, max = 7) # Random exponent for logarithmic
X_pos <- X - min(X) + 1   # now X_pos âˆˆ [1, 21]
Y_base   <- C * log(E * X_pos + 1) # Adding 1 to avoid log(0)
err_sd   <- runif(1, min = 0, max = 0.5)
Y_noise  <- Y_base + rnorm(length(X), mean = 0, sd = sd(Y_base) * err_sd)
Y_scaled <- (Y_noise - min(Y_noise)) / diff(range(Y_noise)) * 20 - 10
}
#plot the data
ggplot(data = data.frame(X, Y_scaled), aes(x = X, y = Y_scaled)) +
geom_point() +
labs(title = "Scatter Plot of Y vs X",
x = "X",
y = "Y") +
theme_minimal()
runApp('Correlator')
runApp('TestCorr')
runApp('TestCorr')
runApp('TestCorr')
shiny::runApp('TestCorr')
runApp('Correlator')
runApp('TestCorr')
runApp('TestCorr')
git status
runApp('~/Master Utrecht 3')
runApp('TestCorr')
runApp('~/Master Utrecht 3')
library(shiny)
library(shinyBS)
library(ggplot2)
library(latex2exp)
runApp('~/Master Utrecht 3')
runApp('~/Master Utrecht 3')
runApp('Correlator')
runApp('Correlator')
runApp('Correlator')
shiny::runApp('Correlator')
runApp('Correlator')
